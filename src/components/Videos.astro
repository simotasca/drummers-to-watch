---
import { drummers } from "../videos.json";
---

<div id="videos"></div>
<div id="videos-container" class="contents">
  <div
    id="loading-placeholder"
    data-drummers={JSON.stringify(drummers)}
    style="scroll-snap-align: start;"
    class="h-full w-full relative mx-auto">
    <div
      class="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 aspect-[9/16] max-w-full w-[320px] max-h-[calc(100%)] p-6 object-contain bg-neutral-700 opacity-10 animate-pulse grid place-items-end">
      <div id="observe-loader"></div>
    </div>
  </div>
</div>

<script>
  const container =
    document.querySelector<HTMLDivElement>("#videos-container")!;
  let loader = document.querySelector<HTMLDivElement>("#loading-placeholder")!;
  const drummers: any[] = JSON.parse(loader.dataset.drummers!);
  let videos: { video: HTMLVideoElement; overlay: HTMLDivElement }[] = [];

  let isLoading = false;
  let id = 0;

  const videoObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (!entry.isIntersecting) return;

        const video = entry.target.querySelector<HTMLVideoElement>("video")!;
        const overlay =
          entry.target.querySelector<HTMLDivElement>("[data-overlay]")!;

        videos.forEach((vid) => {
          if (vid.video === video) return;
          // vid.pause();
          // vid.currentTime = 0;
          vid.video.src = "";
          vid.overlay.classList.remove("opacity-0");
        });

        console.log(overlay);
        overlay.classList.add("opacity-0");

        if (!video.paused) return;

        video.muted = false;
        video.play().catch(() => {
          video.src = video.dataset.src!;
          video.muted = true;
          video.play();
        });
      });
    },
    {
      threshold: 0.8,
    }
  );

  const observer = new IntersectionObserver((entries) => {
    const [entry] = entries;

    if (!entry.isIntersecting || isLoading) return;

    isLoading = true;

    let promises = [];
    let newVideos: HTMLDivElement[] = [];

    for (const drummer of drummers.splice(0, 1)) {
      const container = document.createElement("div");
      container.className = "h-full w-full relative mx-auto";

      const videoContainer = document.createElement("div");
      videoContainer.className =
        "absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 " +
        "aspect-[9/16] max-w-full pr-8 w-[320px] max-h-[calc(100%-4rem)]";

      const videoContainerInner = document.createElement("div");
      videoContainerInner.style.position = "relative";
      videoContainerInner.className = "w-full h-full";

      const video = document.createElement("video");
      video.className = "w-full h-full object-contain";
      video.src = drummer.video;
      video.controls = true;
      video.dataset.src = drummer.video;

      const info = document.createElement("a");
      info.style.position = "absolute";
      info.style.left = "100%";
      info.style.top = "0";
      info.style.display = "flex";
      info.style.gap = "0.7rem";
      info.style.rotate = "90deg";
      info.style.transformOrigin = "left";
      info.style.translate = "15px 15px";
      info.innerHTML = `
        <img src="/youtube.svg" style="width: 40px" />
        <p class="whitespace-nowrap pb-0.5 font-semibold">${drummer.name}</p>
      `;
      if (drummer.ig) info.href = drummer.ig;
      info.target = "_blank";

      const overlay = document.createElement("div");
      overlay.className =
        "absolute w-full h-full left-0 top-0 bg-neutral-800 z-10 grid place-items-center pointer-events-none";
      overlay.innerHTML = `
        <div class="w-1/4 aspect-square bg-neutral-700 rounded-full grid place-items-center">
          <div class="bg-neutral-400 w-1/3 aspect-square translate-x-1 translate-y-px" style="clip-path: polygon(100% 50%, 0 0, 0 100%);"></div>
        </div>
      `;
      overlay.dataset.overlay = "true";

      videoContainerInner.appendChild(video);
      videoContainerInner.appendChild(info);
      videoContainerInner.appendChild(overlay);
      videoContainer.appendChild(videoContainerInner);
      container.appendChild(videoContainer);

      newVideos.push(container);

      promises.push(
        new Promise((resolve) => {
          if (video.readyState == 4) return resolve(null);
          video.addEventListener("loadeddata", () => resolve(null));
        })
      );
    }

    Promise.all(promises).then(async () => {
      // await new Promise<void>((r) => setTimeout(() => r(), 300));

      loader.remove();

      newVideos.forEach((videoContainer) => {
        container.appendChild(videoContainer);
        const video = videoContainer.querySelector("video")!;
        const overlay =
          videoContainer.querySelector<HTMLDivElement>("[data-overlay]")!;
        videoObserver.observe(videoContainer);
        videos.push({ video, overlay });
      });

      if (drummers.length > 0) {
        container.appendChild(loader);
      } else {
        document
          .querySelector<HTMLDivElement>("#footer")!
          .classList.remove("hidden");
      }

      isLoading = false;
    });
  });

  observer.observe(loader.querySelector("#observe-loader")!);
</script>
